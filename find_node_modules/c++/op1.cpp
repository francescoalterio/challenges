#include <iostream>
#include <filesystem>
#include <string>
#include <stack>
#include <vector>

using namespace std;

class NodeModule {
    public:
        string init_path;
        NodeModule(string init_path) {
            this->init_path = init_path;
        }
        vector<string> getNodeModules() {
            string currentPath;
            stack<string> dirsToFind;
            vector<string> nodeModules;
            dirsToFind.push(this->init_path);
            while(dirsToFind.size() > 0) {
                currentPath = dirsToFind.top();
                dirsToFind.pop();
                for(const auto file : filesystem::directory_iterator(currentPath)) {
                    if(file.is_directory()) {
                        if(file.path().filename() == "node_modules") {
                            nodeModules.push_back(file.path());
                        } else {
                            dirsToFind.push(file.path());
                        }
                    }
                }
            }
            return nodeModules;

        }
};

int main() {
   NodeModule nodeModule(filesystem::current_path());
   vector<string> nodeModules = nodeModule.getNodeModules();
   for(string dir : nodeModules) {
        cout << dir << endl;
   }
}
